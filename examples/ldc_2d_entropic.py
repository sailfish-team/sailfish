#!/usr/bin/env python
"""
Runs a 2D lid-driven cavity simulation using the entropic LB model.
Illustrates how to use a custom simulation class which computes
an additional scalar field on the GPU (entropy). This field is
automatically available in the output generated by the simulation.

The auxilliary GPU code for this simulation is entropic_utils.mako.

See the ldc_2d module for more info about the geometry.
"""

from sailfish.controller import LBSimulationController
from sailfish.lb_base import ScalarField, VectorField, KernelPair
from sailfish.lb_single import LBEntropicFluidSim
from examples import ldc_2d

ldc_2d.LDCBlock.max_v = 0.01

class EnhancedEntropicFluidSim(LBEntropicFluidSim):
    @classmethod
    def fields(cls, grids):
        return [ScalarField('rho'), VectorField('v'),
                ScalarField('alpha', init=2.0),
                ScalarField('entropy')]

    def get_aux_kernels(self, runner):
        gpu_dist1a = runner.gpu_dist(0, 0)
        gpu_dist1b = runner.gpu_dist(0, 1)
        gpu_map = runner.gpu_geo_map()
        gpu_entropy = runner.gpu_field(self.entropy)

        ce1 = runner.get_kernel('ComputeEntropy',
                                [gpu_map, gpu_dist1b, gpu_entropy],
                                'PPP', needs_iteration=True)
        ce2 = runner.get_kernel('ComputeEntropy',
                                [gpu_map, gpu_dist1a, gpu_entropy],
                                'PPP', needs_iteration=True)
        return KernelPair([ce1], [ce2])


class EntropicLDCSim(EnhancedEntropicFluidSim):
    subdomain = ldc_2d.LDCBlock
    aux_code = ['entropic_utils.mako']

    @classmethod
    def update_defaults(cls, defaults):
        N = 126
        defaults.update({
            'model': 'elbm',
            'visc': (N-2) * ldc_2d.LDCBlock.max_v / 7500.0,
            'lat_nx': N,
            'lat_ny': N})


if __name__ == '__main__':
    ctrl = LBSimulationController(EntropicLDCSim)
    ctrl.run()
